var searchIndex = {};
searchIndex['roaring'] = {"items":[[0,"","roaring","This is a [Rust][] port of the [Roaring bitmap][] data structure, initially\ndefined as a [Java library][roaring-java] and described in [_Better bitmap\nperformance with Roaring bitmaps_][roaring-paper]."],[1,"Iter","","An iterator for `RoaringBitmap`."],[1,"UnionIter","","An iterator for `RoaringBitmap`."],[1,"IntersectionIter","","An iterator for `RoaringBitmap`."],[1,"DifferenceIter","","An iterator for `RoaringBitmap`."],[1,"SymmetricDifferenceIter","","An iterator for `RoaringBitmap`."],[1,"RoaringBitmap","","A compressed bitmap using the [Roaring bitmap compression scheme](http://roaringbitmap.org)."],[10,"next","","",0],[10,"next","","",1],[10,"next","","",2],[10,"next","","",3],[10,"next","","",4],[10,"clone","","",5],[10,"eq","","",5],[10,"ne","","",5],[10,"new","","Creates an empty `RoaringBitmap`.",5],[10,"insert","","Adds a value to the set. Returns `true` if the value was not already present in the set.",5],[10,"remove","","Removes a value from the set. Returns `true` if the value was present in the set.",5],[10,"contains","","Returns `true` if this set contains the specified integer.",5],[10,"clear","","Clears all integers in this set.",5],[10,"is_empty","","Returns `true` if there are no integers in this set.",5],[10,"len","","Returns the number of distinct integers added to the set.",5],[10,"iter","","Iterator over each u32 stored in the RoaringBitmap, guarantees values are ordered by value.",5],[10,"is_disjoint","","Returns true if the set has no elements in common with other. This is equivalent to\nchecking for an empty intersection.",5],[10,"is_subset","","Returns `true` if this set is a subset of `other`.",5],[10,"is_superset","","Returns `true` if this set is a superset of `other`.",5],[10,"union","","Returns an iterator over the union of this bitmap with the `other` bitmap.",5],[10,"intersection","","Returns an iterator over the intersection of this bitmap with the `other` bitmap.",5],[10,"difference","","Returns an iterator over the set of `u32`s in `this` that are not in `other`.",5],[10,"symmetric_difference","","Returns an iterator over the set of `u32`s in `this` that are not in `other` + in `other`\nthat are not in `this`.",5],[10,"union_with","","Unions in-place with the specified other bitmap.",5],[10,"intersect_with","","Intersects in-place with the specified other bitmap.",5],[10,"difference_with","","Removes all values in the specified other bitmap from self, in-place.",5],[10,"symmetric_difference_with","","Replaces this bitmap with one that is equivalent to `self XOR other`.",5],[10,"from_iter","","",5],[10,"from_iter","","",5],[10,"extend","","",5],[10,"extend","","",5],[4,"Output","",""],[10,"bitor","","Unions the `rhs` into this `RoaringBitmap`.",5],[4,"Output","",""],[4,"Output","",""],[4,"Output","",""],[10,"bitor","","Unions the `rhs` into this `RoaringBitmap`.",5],[4,"Output","",""],[10,"bitand","","Intersects the `rhs` into this `RoaringBitmap`.",5],[4,"Output","",""],[10,"bitand","","Intersects the `rhs` into this `RoaringBitmap`.",5],[4,"Output","",""],[4,"Output","",""],[4,"Output","",""],[10,"sub","","Subtracts the `rhs` into this `RoaringBitmap`.",5],[4,"Output","",""],[10,"sub","","Subtracts the `rhs` into this `RoaringBitmap`.",5],[4,"Output","",""],[4,"Output","",""],[10,"bitxor","","Subtracts the `rhs` into this `RoaringBitmap`.",5],[4,"Output","",""],[10,"bitxor","","Exclusive ors the `rhs` into this `RoaringBitmap`.",5],[4,"Output","",""],[4,"Output","",""],[10,"fmt","","",5]],"paths":[[1,"Iter"],[1,"UnionIter"],[1,"IntersectionIter"],[1,"DifferenceIter"],[1,"SymmetricDifferenceIter"],[1,"RoaringBitmap"]]};
initSearch(searchIndex);
