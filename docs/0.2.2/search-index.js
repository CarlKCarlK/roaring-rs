var searchIndex = {};
searchIndex['roaring'] = {"items":[[0,"","roaring","This is a [Rust][] port of the [Roaring bitmap][] data structure, initially\ndefined as a [Java library][roaring-java] and described in [_Better bitmap\nperformance with Roaring bitmaps_][roaring-paper]."],[3,"Iter","","An iterator for `RoaringBitmap`."],[3,"UnionIter","","An iterator for `RoaringBitmap`."],[3,"IntersectionIter","","An iterator for `RoaringBitmap`."],[3,"DifferenceIter","","An iterator for `RoaringBitmap`."],[3,"SymmetricDifferenceIter","","An iterator for `RoaringBitmap`."],[3,"RoaringBitmap","","A compressed bitmap using the [Roaring bitmap compression scheme](http://roaringbitmap.org)."],[11,"next","","",0],[11,"next","","",1],[11,"next","","",2],[11,"next","","",3],[11,"next","","",4],[11,"clone","","",5],[11,"eq","","",5],[11,"ne","","",5],[11,"new","","Creates an empty `RoaringBitmap`.",5],[11,"insert","","Adds a value to the set. Returns `true` if the value was not already present in the set.",5],[11,"remove","","Removes a value from the set. Returns `true` if the value was present in the set.",5],[11,"contains","","Returns `true` if this set contains the specified integer.",5],[11,"clear","","Clears all integers in this set.",5],[11,"is_empty","","Returns `true` if there are no integers in this set.",5],[11,"len","","Returns the number of distinct integers added to the set.",5],[11,"iter","","Iterator over each value stored in the RoaringBitmap, guarantees values are ordered by value.",5],[11,"is_disjoint","","Returns true if the set has no elements in common with other. This is equivalent to\nchecking for an empty intersection.",5],[11,"is_subset","","Returns `true` if this set is a subset of `other`.",5],[11,"is_superset","","Returns `true` if this set is a superset of `other`.",5],[11,"union","","Returns an iterator over the union of this bitmap with the `other` bitmap.",5],[11,"intersection","","Returns an iterator over the intersection of this bitmap with the `other` bitmap.",5],[11,"difference","","Returns an iterator over the set of values in `this` that are not in `other`.",5],[11,"symmetric_difference","","Returns an iterator over the set of values in `this` that are not in `other` + in `other`\nthat are not in `this`.",5],[11,"union_with","","Unions in-place with the specified other bitmap.",5],[11,"intersect_with","","Intersects in-place with the specified other bitmap.",5],[11,"difference_with","","Removes all values in the specified other bitmap from self, in-place.",5],[11,"symmetric_difference_with","","Replaces this bitmap with one that is equivalent to `self XOR other`.",5],[6,"Item","",""],[6,"IntoIter","",""],[11,"into_iter","","",5],[11,"from_iter","","",5],[11,"from_iter","","",5],[11,"extend","","",5],[11,"extend","","",5],[6,"Output","",""],[11,"bitor","","Unions the `rhs` into this `RoaringBitmap`.",5],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[11,"bitor","","Unions the `rhs` into this `RoaringBitmap`.",5],[6,"Output","",""],[11,"bitand","","Intersects the `rhs` into this `RoaringBitmap`.",5],[6,"Output","",""],[11,"bitand","","Intersects the `rhs` into this `RoaringBitmap`.",5],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[11,"sub","","Subtracts the `rhs` into this `RoaringBitmap`.",5],[6,"Output","",""],[11,"sub","","Subtracts the `rhs` into this `RoaringBitmap`.",5],[6,"Output","",""],[6,"Output","",""],[11,"bitxor","","Subtracts the `rhs` into this `RoaringBitmap`.",5],[6,"Output","",""],[11,"bitxor","","Exclusive ors the `rhs` into this `RoaringBitmap`.",5],[6,"Output","",""],[6,"Output","",""],[11,"fmt","","",5]],"paths":[[3,"Iter"],[3,"UnionIter"],[3,"IntersectionIter"],[3,"DifferenceIter"],[3,"SymmetricDifferenceIter"],[3,"RoaringBitmap"]]};
initSearch(searchIndex);
